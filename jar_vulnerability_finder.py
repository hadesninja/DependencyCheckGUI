import sys
import hashlib
import json
import requests
import webbrowser
from PyQt5.QtWidgets import (
    QApplication, QWidget, QPushButton, QLabel, QLineEdit, QFileDialog,
    QVBoxLayout, QHBoxLayout, QTableWidget, QTableWidgetItem, QMessageBox,
    QHeaderView, QAbstractItemView, QScrollArea
)
from PyQt5.QtGui import QColor, QCursor
from PyQt5.QtCore import Qt

class JarVulnerabilityScanner(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("JAR Vulnerability Finder")
        self.resize(1100, 750)
        self.setup_ui()

    def setup_ui(self):
        layout = QVBoxLayout(self)

        # File selection
        file_layout = QHBoxLayout()
        self.file_entry = QLineEdit()
        browse_button = QPushButton("Browse JAR")
        browse_button.clicked.connect(self.browse_file)
        file_layout.addWidget(QLabel("JAR File:"))
        file_layout.addWidget(self.file_entry)
        file_layout.addWidget(browse_button)

        # Scan button
        scan_button = QPushButton("Scan for Vulnerabilities")
        scan_button.clicked.connect(self.scan_jar)

        # Vulnerabilities count label
        self.vuln_label = QLabel("Total Vulnerabilities: 0")
        self.vuln_label.setStyleSheet("font-weight: bold; font-size: 14px;")

        # Table for output
        self.table = QTableWidget()
        self.table.setColumnCount(4)
        self.table.setHorizontalHeaderLabels(["CVE ID", "Title", "Severity", "Reference"])
        header = self.table.horizontalHeader()
        header.setSectionResizeMode(QHeaderView.Stretch)  # Auto-resize columns to fit the window
        self.table.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.table.cellClicked.connect(self.handle_cell_click)

        # Scroll area (optional, but TableWidget handles big data fine usually)
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setWidget(self.table)

        # Add widgets
        layout.addLayout(file_layout)
        layout.addWidget(scan_button)
        layout.addWidget(self.vuln_label)
        layout.addWidget(scroll_area)

    def browse_file(self):
        file_path, _ = QFileDialog.getOpenFileName(self, "Select JAR File", "", "JAR Files (*.jar)")
        if file_path:
            self.file_entry.setText(file_path)

    def scan_jar(self):
        jar_path = self.file_entry.text().strip()
        if not jar_path:
            QMessageBox.warning(self, "Warning", "Please select a JAR file first.")
            return

        # Step 1: Calculate SHA-1
        sha1_hash = self.calculate_sha1(jar_path)
        if not sha1_hash:
            QMessageBox.critical(self, "Error", "Failed to calculate SHA-1.")
            return

        # Step 2: Lookup Maven Coordinates
        gav = self.lookup_maven_coordinates(sha1_hash)
        if not gav:
            QMessageBox.warning(self, "Not Found", "JAR not found in Maven Central.")
            return
        group_id, artifact_id, version = gav

        # Step 3: Fetch vulnerabilities
        vulnerabilities = self.fetch_vulnerabilities(group_id, artifact_id, version)
        if vulnerabilities is None:
            QMessageBox.critical(self, "Error", "Failed to query vulnerabilities.")
            return

        self.populate_table(vulnerabilities)

    def calculate_sha1(self, file_path):
        try:
            sha1 = hashlib.sha1()
            with open(file_path, 'rb') as f:
                while chunk := f.read(8192):
                    sha1.update(chunk)
            return sha1.hexdigest()
        except Exception as e:
            print(f"Error calculating SHA-1: {e}")
            return None

    def lookup_maven_coordinates(self, sha1_hash):
        url = f"https://search.maven.org/solrsearch/select?q=1:{sha1_hash}&rows=1&wt=json"
        try:
            resp = requests.get(url)
            if resp.status_code != 200:
                return None
            data = resp.json()
            if data['response']['numFound'] == 0:
                return None
            doc = data['response']['docs'][0]
            return doc['g'], doc['a'], doc['v']
        except Exception as e:
            print(f"Error querying Maven Central: {e}")
            return None

    def fetch_vulnerabilities(self, group_id, artifact_id, version):
        coordinate = f"pkg:maven/{group_id}/{artifact_id}@{version}"
        url = "https://ossindex.sonatype.org/api/v3/component-report"
        headers = {
            "Content-Type": "application/vnd.ossindex.component-report-request.v1+json"
        }
        payload = {
            "coordinates": [coordinate]
        }
        try:
            resp = requests.post(url, headers=headers, data=json.dumps(payload))
            if resp.status_code != 200:
                return None
            data = resp.json()
            if not data:
                return []
            return data[0].get('vulnerabilities', [])
        except Exception as e:
            print(f"Error querying OSS Index: {e}")
            return None

    def populate_table(self, vulnerabilities):
        self.table.setRowCount(0)
        self.vuln_label.setText(f"Total Vulnerabilities: {len(vulnerabilities)}")

        if not vulnerabilities:
            QMessageBox.information(self, "Result", "No vulnerabilities found.")
            return

        for vuln in vulnerabilities:
            row = self.table.rowCount()
            self.table.insertRow(row)

            severity = vuln.get('cvssScore', 0)
            severity_label = self.get_severity_label(severity)
            severity_text = f"{severity} ({severity_label})"

            ref_url = vuln.get('reference', '')

            self.table.setItem(row, 0, QTableWidgetItem(vuln.get('cve', 'N/A')))
            self.table.setItem(row, 1, QTableWidgetItem(vuln.get('title', 'N/A')))
            severity_item = QTableWidgetItem(severity_text)
            self.table.setItem(row, 2, severity_item)
            ref_item = QTableWidgetItem(ref_url)
            ref_item.setForeground(QColor('blue'))
            ref_item.setToolTip('Click to open link')
            ref_item.setData(Qt.UserRole, ref_url)
            self.table.setItem(row, 3, ref_item)

            # Color severity column cells based on score
            self.color_severity_column(severity_item, severity)

    def get_severity_label(self, severity):
        if severity == 0.0:
            return "None"
        elif 0.1 <= severity <= 3.9:
            return "Low"
        elif 4.0 <= severity <= 6.9:
            return "Medium"
        elif 7.0 <= severity <= 8.9:
            return "High"
        elif 9.0 <= severity <= 10.0:
            return "Critical"
        return "Unknown"

    def color_severity_column(self, severity_item, severity):
        # Custom color classes
        if severity == 0.0:
            severity_item.setBackground(QColor('#4caf50'))  # Green (None)
            severity_item.setForeground(QColor('white'))  # Text color
        elif 0.1 <= severity <= 3.9:
            severity_item.setBackground(QColor('#ffffe0'))  # Light Yellow (Low)
            severity_item.setForeground(QColor('black'))
        elif 4.0 <= severity <= 6.9:
            severity_item.setBackground(QColor('#ffcc66'))  # Yellowish-orange (Medium)
            severity_item.setForeground(QColor('black'))
        elif 7.0 <= severity <= 8.9:
            severity_item.setBackground(QColor('#fd4300'))  # Orange (High)
            severity_item.setForeground(QColor('white'))
        elif 9.0 <= severity <= 10.0:
            severity_item.setBackground(QColor('#b90404'))  # Red (Critical)
            severity_item.setForeground(QColor('white'))

    def handle_cell_click(self, row, column):
        if column == 3:  # Reference link column
            item = self.table.item(row, column)
            if item:
                url = item.data(Qt.UserRole)
                if url:
                    webbrowser.open(url)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    scanner = JarVulnerabilityScanner()
    scanner.show()
    sys.exit(app.exec_())
